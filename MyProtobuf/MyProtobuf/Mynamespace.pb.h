// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mynamespace.proto

#ifndef PROTOBUF_Mynamespace_2eproto__INCLUDED
#define PROTOBUF_Mynamespace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Mynamespace {

	// Internal implementation detail -- do not call these.
	void  protobuf_AddDesc_Mynamespace_2eproto();
	void protobuf_AssignDesc_Mynamespace_2eproto();
	void protobuf_ShutdownFile_Mynamespace_2eproto();

	class Blob;
	class BlobProto;

	// ===================================================================

	class Blob : public ::google::protobuf::Message {
	public:
		Blob();
		virtual ~Blob();

		Blob(const Blob& from);

		inline Blob& operator=(const Blob& from) {
			CopyFrom(from);
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
			return _unknown_fields_;
		}

		inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
			return &_unknown_fields_;
		}

		static const ::google::protobuf::Descriptor* descriptor();
		static const Blob& default_instance();

		void Swap(Blob* other);

		// implements Message ----------------------------------------------

		Blob* New() const;
		void CopyFrom(const ::google::protobuf::Message& from);
		void MergeFrom(const ::google::protobuf::Message& from);
		void CopyFrom(const Blob& from);
		void MergeFrom(const Blob& from);
		void Clear();
		bool IsInitialized() const;

		int ByteSize() const;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input);
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const;
		::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
		int GetCachedSize() const { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const;
	public:
		::google::protobuf::Metadata GetMetadata() const;

		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------

		// repeated int64 dim = 1 [packed = true];
		inline int dim_size() const;
		inline void clear_dim();
		static const int kDimFieldNumber = 1;
		inline ::google::protobuf::int64 dim(int index) const;
		inline void set_dim(int index, ::google::protobuf::int64 value);
		inline void add_dim(::google::protobuf::int64 value);
		inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
			dim() const;
		inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
			mutable_dim();

		// optional int64 num = 2 [default = 0];
		inline bool has_num() const;
		inline void clear_num();
		static const int kNumFieldNumber = 2;
		inline ::google::protobuf::int64 num() const;
		inline void set_num(::google::protobuf::int64 value);

		// @@protoc_insertion_point(class_scope:Mynamespace.Blob)
	private:
		inline void set_has_num();
		inline void clear_has_num();

		::google::protobuf::UnknownFieldSet _unknown_fields_;

		::google::protobuf::uint32 _has_bits_[1];
		mutable int _cached_size_;
		::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
		mutable int _dim_cached_byte_size_;
		::google::protobuf::int64 num_;
		friend void  protobuf_AddDesc_Mynamespace_2eproto();
		friend void protobuf_AssignDesc_Mynamespace_2eproto();
		friend void protobuf_ShutdownFile_Mynamespace_2eproto();

		void InitAsDefaultInstance();
		static Blob* default_instance_;
	};
	// -------------------------------------------------------------------

	class BlobProto : public ::google::protobuf::Message {
	public:
		BlobProto();
		virtual ~BlobProto();

		BlobProto(const BlobProto& from);

		inline BlobProto& operator=(const BlobProto& from) {
			CopyFrom(from);
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
			return _unknown_fields_;
		}

		inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
			return &_unknown_fields_;
		}

		static const ::google::protobuf::Descriptor* descriptor();
		static const BlobProto& default_instance();

		void Swap(BlobProto* other);

		// implements Message ----------------------------------------------

		BlobProto* New() const;
		void CopyFrom(const ::google::protobuf::Message& from);
		void MergeFrom(const ::google::protobuf::Message& from);
		void CopyFrom(const BlobProto& from);
		void MergeFrom(const BlobProto& from);
		void Clear();
		bool IsInitialized() const;

		int ByteSize() const;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input);
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const;
		::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
		int GetCachedSize() const { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const;
	public:
		::google::protobuf::Metadata GetMetadata() const;

		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------

		// optional int32 num = 1 [default = 0];
		inline bool has_num() const;
		inline void clear_num();
		static const int kNumFieldNumber = 1;
		inline ::google::protobuf::int32 num() const;
		inline void set_num(::google::protobuf::int32 value);

		// optional int32 channels = 2 [default = 0];
		inline bool has_channels() const;
		inline void clear_channels();
		static const int kChannelsFieldNumber = 2;
		inline ::google::protobuf::int32 channels() const;
		inline void set_channels(::google::protobuf::int32 value);

		// optional int32 height = 3 [default = 0];
		inline bool has_height() const;
		inline void clear_height();
		static const int kHeightFieldNumber = 3;
		inline ::google::protobuf::int32 height() const;
		inline void set_height(::google::protobuf::int32 value);

		// optional int32 width = 4 [default = 0];
		inline bool has_width() const;
		inline void clear_width();
		static const int kWidthFieldNumber = 4;
		inline ::google::protobuf::int32 width() const;
		inline void set_width(::google::protobuf::int32 value);

		// repeated float data = 5 [packed = true];
		inline int data_size() const;
		inline void clear_data();
		static const int kDataFieldNumber = 5;
		inline float data(int index) const;
		inline void set_data(int index, float value);
		inline void add_data(float value);
		inline const ::google::protobuf::RepeatedField< float >&
			data() const;
		inline ::google::protobuf::RepeatedField< float >*
			mutable_data();

		// repeated float diff = 6 [packed = true];
		inline int diff_size() const;
		inline void clear_diff();
		static const int kDiffFieldNumber = 6;
		inline float diff(int index) const;
		inline void set_diff(int index, float value);
		inline void add_diff(float value);
		inline const ::google::protobuf::RepeatedField< float >&
			diff() const;
		inline ::google::protobuf::RepeatedField< float >*
			mutable_diff();

		// optional .Mynamespace.Blob blob = 7;
		inline bool has_blob() const;
		inline void clear_blob();
		static const int kBlobFieldNumber = 7;
		inline const ::Mynamespace::Blob& blob() const;
		inline ::Mynamespace::Blob* mutable_blob();
		inline ::Mynamespace::Blob* release_blob();
		inline void set_allocated_blob(::Mynamespace::Blob* blob);

		// repeated .Mynamespace.Blob blobs = 8;
		inline int blobs_size() const;
		inline void clear_blobs();
		static const int kBlobsFieldNumber = 8;
		inline const ::Mynamespace::Blob& blobs(int index) const;
		inline ::Mynamespace::Blob* mutable_blobs(int index);
		inline ::Mynamespace::Blob* add_blobs();
		inline const ::google::protobuf::RepeatedPtrField< ::Mynamespace::Blob >&
			blobs() const;
		inline ::google::protobuf::RepeatedPtrField< ::Mynamespace::Blob >*
			mutable_blobs();

		// @@protoc_insertion_point(class_scope:Mynamespace.BlobProto)
	private:
		inline void set_has_num();
		inline void clear_has_num();
		inline void set_has_channels();
		inline void clear_has_channels();
		inline void set_has_height();
		inline void clear_has_height();
		inline void set_has_width();
		inline void clear_has_width();
		inline void set_has_blob();
		inline void clear_has_blob();

		::google::protobuf::UnknownFieldSet _unknown_fields_;

		::google::protobuf::uint32 _has_bits_[1];
		mutable int _cached_size_;
		::google::protobuf::int32 num_;
		::google::protobuf::int32 channels_;
		::google::protobuf::int32 height_;
		::google::protobuf::int32 width_;
		::google::protobuf::RepeatedField< float > data_;
		mutable int _data_cached_byte_size_;
		::google::protobuf::RepeatedField< float > diff_;
		mutable int _diff_cached_byte_size_;
		::Mynamespace::Blob* blob_;
		::google::protobuf::RepeatedPtrField< ::Mynamespace::Blob > blobs_;
		friend void  protobuf_AddDesc_Mynamespace_2eproto();
		friend void protobuf_AssignDesc_Mynamespace_2eproto();
		friend void protobuf_ShutdownFile_Mynamespace_2eproto();

		void InitAsDefaultInstance();
		static BlobProto* default_instance_;
	};
	// ===================================================================


	// ===================================================================

	// Blob

	// repeated int64 dim = 1 [packed = true];
	inline int Blob::dim_size() const {
		return dim_.size();
	}
	inline void Blob::clear_dim() {
		dim_.Clear();
	}
	inline ::google::protobuf::int64 Blob::dim(int index) const {
		// @@protoc_insertion_point(field_get:Mynamespace.Blob.dim)
		return dim_.Get(index);
	}
	inline void Blob::set_dim(int index, ::google::protobuf::int64 value) {
		dim_.Set(index, value);
		// @@protoc_insertion_point(field_set:Mynamespace.Blob.dim)
	}
	inline void Blob::add_dim(::google::protobuf::int64 value) {
		dim_.Add(value);
		// @@protoc_insertion_point(field_add:Mynamespace.Blob.dim)
	}
	inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
		Blob::dim() const {
		// @@protoc_insertion_point(field_list:Mynamespace.Blob.dim)
		return dim_;
	}
	inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
		Blob::mutable_dim() {
		// @@protoc_insertion_point(field_mutable_list:Mynamespace.Blob.dim)
		return &dim_;
	}

	// optional int64 num = 2 [default = 0];
	inline bool Blob::has_num() const {
		return (_has_bits_[0] & 0x00000002u) != 0;
	}
	inline void Blob::set_has_num() {
		_has_bits_[0] |= 0x00000002u;
	}
	inline void Blob::clear_has_num() {
		_has_bits_[0] &= ~0x00000002u;
	}
	inline void Blob::clear_num() {
		num_ = GOOGLE_LONGLONG(0);
		clear_has_num();
	}
	inline ::google::protobuf::int64 Blob::num() const {
		// @@protoc_insertion_point(field_get:Mynamespace.Blob.num)
		return num_;
	}
	inline void Blob::set_num(::google::protobuf::int64 value) {
		set_has_num();
		num_ = value;
		// @@protoc_insertion_point(field_set:Mynamespace.Blob.num)
	}

	// -------------------------------------------------------------------

	// BlobProto

	// optional int32 num = 1 [default = 0];
	inline bool BlobProto::has_num() const {
		return (_has_bits_[0] & 0x00000001u) != 0;
	}
	inline void BlobProto::set_has_num() {
		_has_bits_[0] |= 0x00000001u;
	}
	inline void BlobProto::clear_has_num() {
		_has_bits_[0] &= ~0x00000001u;
	}
	inline void BlobProto::clear_num() {
		num_ = 0;
		clear_has_num();
	}
	inline ::google::protobuf::int32 BlobProto::num() const {
		// @@protoc_insertion_point(field_get:Mynamespace.BlobProto.num)
		return num_;
	}
	inline void BlobProto::set_num(::google::protobuf::int32 value) {
		set_has_num();
		num_ = value;
		// @@protoc_insertion_point(field_set:Mynamespace.BlobProto.num)
	}

	// optional int32 channels = 2 [default = 0];
	inline bool BlobProto::has_channels() const {
		return (_has_bits_[0] & 0x00000002u) != 0;
	}
	inline void BlobProto::set_has_channels() {
		_has_bits_[0] |= 0x00000002u;
	}
	inline void BlobProto::clear_has_channels() {
		_has_bits_[0] &= ~0x00000002u;
	}
	inline void BlobProto::clear_channels() {
		channels_ = 0;
		clear_has_channels();
	}
	inline ::google::protobuf::int32 BlobProto::channels() const {
		// @@protoc_insertion_point(field_get:Mynamespace.BlobProto.channels)
		return channels_;
	}
	inline void BlobProto::set_channels(::google::protobuf::int32 value) {
		set_has_channels();
		channels_ = value;
		// @@protoc_insertion_point(field_set:Mynamespace.BlobProto.channels)
	}

	// optional int32 height = 3 [default = 0];
	inline bool BlobProto::has_height() const {
		return (_has_bits_[0] & 0x00000004u) != 0;
	}
	inline void BlobProto::set_has_height() {
		_has_bits_[0] |= 0x00000004u;
	}
	inline void BlobProto::clear_has_height() {
		_has_bits_[0] &= ~0x00000004u;
	}
	inline void BlobProto::clear_height() {
		height_ = 0;
		clear_has_height();
	}
	inline ::google::protobuf::int32 BlobProto::height() const {
		// @@protoc_insertion_point(field_get:Mynamespace.BlobProto.height)
		return height_;
	}
	inline void BlobProto::set_height(::google::protobuf::int32 value) {
		set_has_height();
		height_ = value;
		// @@protoc_insertion_point(field_set:Mynamespace.BlobProto.height)
	}

	// optional int32 width = 4 [default = 0];
	inline bool BlobProto::has_width() const {
		return (_has_bits_[0] & 0x00000008u) != 0;
	}
	inline void BlobProto::set_has_width() {
		_has_bits_[0] |= 0x00000008u;
	}
	inline void BlobProto::clear_has_width() {
		_has_bits_[0] &= ~0x00000008u;
	}
	inline void BlobProto::clear_width() {
		width_ = 0;
		clear_has_width();
	}
	inline ::google::protobuf::int32 BlobProto::width() const {
		// @@protoc_insertion_point(field_get:Mynamespace.BlobProto.width)
		return width_;
	}
	inline void BlobProto::set_width(::google::protobuf::int32 value) {
		set_has_width();
		width_ = value;
		// @@protoc_insertion_point(field_set:Mynamespace.BlobProto.width)
	}

	// repeated float data = 5 [packed = true];
	inline int BlobProto::data_size() const {
		return data_.size();
	}
	inline void BlobProto::clear_data() {
		data_.Clear();
	}
	inline float BlobProto::data(int index) const {
		// @@protoc_insertion_point(field_get:Mynamespace.BlobProto.data)
		return data_.Get(index);
	}
	inline void BlobProto::set_data(int index, float value) {
		data_.Set(index, value);
		// @@protoc_insertion_point(field_set:Mynamespace.BlobProto.data)
	}
	inline void BlobProto::add_data(float value) {
		data_.Add(value);
		// @@protoc_insertion_point(field_add:Mynamespace.BlobProto.data)
	}
	inline const ::google::protobuf::RepeatedField< float >&
		BlobProto::data() const {
		// @@protoc_insertion_point(field_list:Mynamespace.BlobProto.data)
		return data_;
	}
	inline ::google::protobuf::RepeatedField< float >*
		BlobProto::mutable_data() {
		// @@protoc_insertion_point(field_mutable_list:Mynamespace.BlobProto.data)
		return &data_;
	}

	// repeated float diff = 6 [packed = true];
	inline int BlobProto::diff_size() const {
		return diff_.size();
	}
	inline void BlobProto::clear_diff() {
		diff_.Clear();
	}
	inline float BlobProto::diff(int index) const {
		// @@protoc_insertion_point(field_get:Mynamespace.BlobProto.diff)
		return diff_.Get(index);
	}
	inline void BlobProto::set_diff(int index, float value) {
		diff_.Set(index, value);
		// @@protoc_insertion_point(field_set:Mynamespace.BlobProto.diff)
	}
	inline void BlobProto::add_diff(float value) {
		diff_.Add(value);
		// @@protoc_insertion_point(field_add:Mynamespace.BlobProto.diff)
	}
	inline const ::google::protobuf::RepeatedField< float >&
		BlobProto::diff() const {
		// @@protoc_insertion_point(field_list:Mynamespace.BlobProto.diff)
		return diff_;
	}
	inline ::google::protobuf::RepeatedField< float >*
		BlobProto::mutable_diff() {
		// @@protoc_insertion_point(field_mutable_list:Mynamespace.BlobProto.diff)
		return &diff_;
	}

	// optional .Mynamespace.Blob blob = 7;
	inline bool BlobProto::has_blob() const {
		return (_has_bits_[0] & 0x00000040u) != 0;
	}
	inline void BlobProto::set_has_blob() {
		_has_bits_[0] |= 0x00000040u;
	}
	inline void BlobProto::clear_has_blob() {
		_has_bits_[0] &= ~0x00000040u;
	}
	inline void BlobProto::clear_blob() {
		if (blob_ != NULL) blob_->::Mynamespace::Blob::Clear();
		clear_has_blob();
	}
	inline const ::Mynamespace::Blob& BlobProto::blob() const {
		// @@protoc_insertion_point(field_get:Mynamespace.BlobProto.blob)
		return blob_ != NULL ? *blob_ : *default_instance_->blob_;
	}
	inline ::Mynamespace::Blob* BlobProto::mutable_blob() {
		set_has_blob();
		if (blob_ == NULL) blob_ = new ::Mynamespace::Blob;
		// @@protoc_insertion_point(field_mutable:Mynamespace.BlobProto.blob)
		return blob_;
	}
	inline ::Mynamespace::Blob* BlobProto::release_blob() {
		clear_has_blob();
		::Mynamespace::Blob* temp = blob_;
		blob_ = NULL;
		return temp;
	}
	inline void BlobProto::set_allocated_blob(::Mynamespace::Blob* blob) {
		delete blob_;
		blob_ = blob;
		if (blob) {
			set_has_blob();
		}
		else {
			clear_has_blob();
		}
		// @@protoc_insertion_point(field_set_allocated:Mynamespace.BlobProto.blob)
	}

	// repeated .Mynamespace.Blob blobs = 8;
	inline int BlobProto::blobs_size() const {
		return blobs_.size();
	}
	inline void BlobProto::clear_blobs() {
		blobs_.Clear();
	}
	inline const ::Mynamespace::Blob& BlobProto::blobs(int index) const {
		// @@protoc_insertion_point(field_get:Mynamespace.BlobProto.blobs)
		return blobs_.Get(index);
	}
	inline ::Mynamespace::Blob* BlobProto::mutable_blobs(int index) {
		// @@protoc_insertion_point(field_mutable:Mynamespace.BlobProto.blobs)
		return blobs_.Mutable(index);
	}
	inline ::Mynamespace::Blob* BlobProto::add_blobs() {
		// @@protoc_insertion_point(field_add:Mynamespace.BlobProto.blobs)
		return blobs_.Add();
	}
	inline const ::google::protobuf::RepeatedPtrField< ::Mynamespace::Blob >&
		BlobProto::blobs() const {
		// @@protoc_insertion_point(field_list:Mynamespace.BlobProto.blobs)
		return blobs_;
	}
	inline ::google::protobuf::RepeatedPtrField< ::Mynamespace::Blob >*
		BlobProto::mutable_blobs() {
		// @@protoc_insertion_point(field_mutable_list:Mynamespace.BlobProto.blobs)
		return &blobs_;
	}


	// @@protoc_insertion_point(namespace_scope)

}  // namespace Mynamespace

#ifndef SWIG
namespace google {
	namespace protobuf {


	}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Mynamespace_2eproto__INCLUDED
